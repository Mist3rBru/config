{
  "setup": {
    "scope": "typescriptreact",
    "prefix": "setup",
    "body": [
      "import '@testing-library/jest-dom'",
      "",
      "import { faker } from '@faker-js/faker'",
      "import { render, RenderResult } from '@testing-library/react'",
      "",
      "$0"
    ]
  },

  "sut": {
    "scope": "typescriptreact",
    "prefix": "sut",
    "body": [
      "interface Sut {",
      "  sut: RenderResult",
      "  ${2:component}: HTMLElement",
      "}",
      "",
      "const makeSut = (props: ${1:Component}Props): Sut => {",
      "  const sut = render(<${1:Component} {...props} />)",
      "  const $2 = sut.getByTestId('$2')",
      "  return {",
      "    sut,",
      "    $2",
      "  }",
      "}",
      "",
      "$0"
    ]
  },

  "mockProperties": {
    "scope": "typescriptreact",
    "prefix": "mockProps",
    "body": [
      "const mockProps = (): ${1:Component}Props => ({",
      "  $0",
      "})",
      ""
    ]
  },

  "mockComponent": {
    "scope": "typescriptreact",
    "prefix": "mockComp",
    "body": [
      "interface TestProps {",
      "  ",
      "}",
      "",
      "function TestComponent (props: TestProps): JSX.Element {",
      "  const { $1, $2 } = useContext($3Context)",
      "  return (",
      "    <button data-testid=\"$1Button\" onClick={() => $2() }>",
      "      <p>{$1?.}</p>",
      "    </button>",
      "  )",
      "}",
      "",
      "$0"
    ]
  },

  "test": {
    "scope": "typescriptreact",
    "prefix": "test",
    "body": [
      "describe('$1', () => {",
      "  it('should be rendered on DOM', () => {",
      "    const props = mockProps()",
      "    const { ${0:component} } = makeSut(props)",
      "",
      "    expect($0).toBeInTheDocument()",
      "  })",
      "})",
      ""
    ]
  },

  "it": {
    "scope": "typescriptreact",
    "prefix": "it",
    "body": [
      "it('should $1', () => {",
      "  const props = mockProps()",
      "  const { sut } = makeSut(props)",
      "",
      "  const ${2:component} = sut.getByTestId('$2')",
      "",
      "  expect($2).to$0()",
      "})",
    ]
  }
}

