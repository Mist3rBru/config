{
  "sut": {
    "scope": "typescript",
    "prefix": "sut",
    "body": ["interface SutTypes {", "  sut: ${0:Class}", "}"],
		"description": "Create Test Sut Type"
  },

  "test": {
    "scope": "javascript,typescript",
    "prefix": "test",
    "body": [
      "describe('$1', () => {",
      "  it('should $2', async () => {",
      "    const { sut } = makeSut()",
      "    await sut.${3:method}(${4:mockRequest()})",
      "    expect(${5:result}).${6:toBe}($0)",
      "  })",
      "})"
    ],
		"description": "Create test suite"
  },

  "it": {
    "scope": "javascript,typescript",
    "prefix": "it",
    "body": [
      "it('should $1', async () => {",
      "  const { sut } = makeSut()",
      "  await sut.${2:method}(${3:mockRequest()})",
      "  expect(${4:result}).${5:toBe}($0)",
      "})"
    ],
		"description": "Create test"
  },

  "makeSut": {
    "scope": "javascript,typescript",
    "prefix": "makeSut",
    "body": [
      "const makeSut = (): SutTypes => {",
      "  const sut = new ${1:Class}($0)",
      "  return {",
      "    sut",
      "  }",
      "}"
    ],
		"description": "Create sut factory"
  },

  "exception": {
    "scope": "javascript,typescript",
    "prefix": "exception",
    "body": [
      "it('should throw if any dependency throws', async () => {",
      "  const suts: ${1:Class}[] = [].concat(",
      "    new ${1:Class}(",
      "      { ${2:method}: ()  => throwError() }",
      "    )",
      "  )",
      "  for (const sut of suts) {",
      "    const promise = sut.${3:method}()",
      "    await expect(promise).rejects.toThrow()",
      "  }",
      "})"
    ]
  }
}