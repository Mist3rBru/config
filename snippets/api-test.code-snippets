{
  "sut": {
    "scope": "typescript",
    "prefix": ["sut", "makeSut"],
    "body": [
      "interface Sut {",
      "  sut: ${1:Class}",
      "  $2: $3",
      "}",
      "",
      "const makeSut = (): Sut => {",
      "  const $2 = new $4$3",
      "  const sut = new ${1:Class}($2)",
      "  return {",
      "    sut",
      "    $2",
      "  }",
      "}",
      ""
    ]
  },

  "test": {
    "scope": "typescript",
    "prefix": ["test", "describe"],
    "body": [
      "describe('$1', () => {",
      "  it('should $2', async () => {",
      "    const { sut, $5Spy } = makeSut()",
      "    const request = mockRequest()",
      "",
      "    await sut.${3:method}(request)",
      "",
      "    expect($5Spy.calledTimes).toBe(1)",
      "    expect($5Spy.$6).${7:toBe}($0)",
      "  })",
      "})"
    ]
  },

  

  "testMakeValidation": {
    "scope": "typescript",
    "prefix": "testValidation",
    "body": [
      "import { ParamDictionaryKey } from '@/presentation/helpers'",
      "import { IValidation } from '@/validation/protocols'",
      "import { RequiredFieldValidation, ValidationComposite } from '@/validation/validators'",
      "",
      "jest.mock('@/validation/validators/validation-composite')",
      "",
      "describe('$1Validation', () => {",
      "  it('should call ValidationComposite with all validations', async () => {",
      "    make$1Validation()",
      "    const validations: IValidation[] = []",
      "    const fields: ParamsDictionaryKey[] = ['$0']",
      "    fields.forEach(field => {",
      "      validations.push(new RequiredFieldValidation(field))",
      "    })",
      "    expect(ValidationComposite).toHaveBeenCalledTimes(1)",
      "    expect(ValidationComposite).toHaveBeenCalledWith(validations)",
      "  })",
      "})",
      ""
    ]
  },

  "it": {
    "scope": "typescript",
    "prefix": "it",
    "body": [
      "it('should $1', async () => {",
      "  const { sut, $4Spy } = makeSut()",
      "  const request = mockRequest()",
      "",
      "  await sut.${3:method}(request)",
      "",
      "  expect($4Spy.calledTimes).toBe(1)",
      "  expect($4Spy.$5).${6:toBe}($0)",
      "})"
    ]
  },

  "exception": {
    "scope": "typescript",
    "prefix": "exception",
    "body": [
      "it('should throw if any dependency throws', async () => {",
      "  const suts: ${1:Class}[] = [",
      "    new ${1:Class}(",
      "      { ${2:method}: () => throwError() }",
      "    )",
      "  ]",
      "  for (const sut of suts) {",
      "    const request = mockRequest()",
      "    const promise = sut.${3:method}(request)",
      "    await expect(promise).rejects.toThrow()",
      "  }",
      "})"
    ]
  },

  "mockModel": {
    "scope": "typescript",
    "prefix": ["mm", "mockModel"],
    "body": [
      "import { $1 } from '@/domain/models'",
      "import { faker } from '@faker-js/faker'",
      "",
      "export const mock$1 = (): $1 => ({",
      "  $0",
      "})",
      ""
    ]
  },

  "mockRequest": {
    "scope": "typescript",
    "prefix": ["mr", "mockRequest"],
    "body": [
      "const mockRequest = (): I$1.Params => ({",
      "  $0",
      "})",
      ""
    ]
  },

  "mockSpyClass": {
    "scope": "typescript",
    "prefix": ["ms", "mockSpyClass"],
    "body": [
      "import { faker } from '@faker-js/faker'",
      "",
      "export class $1Spy implements I$1 {",
      "  calledTimes: number = 0",
      "  params: I$1.Params",
      "  result: I$1.Result = $0",
      "  $2 (params: I$1.Params): I$1.Result {",
      "    this.calledTimes++",
      "    this.params = params",
      "    return this.result",
      "  }",
      "}",
      ""
    ]
  },

  "mockPromiseSpyClass": {
    "scope": "typescript",
    "prefix": ["msp", "mockPromiseSpyClass"],
    "body": [
      "import { faker } from '@faker-js/faker'",
      "",
      "export class $1Spy implements I$1 {",
      "  calledTimes: number = 0",
      "  params: I$1.Params",
      "  result: I$1.Result = $0",
      "  async $2 (params: I$1.Params): Promise<I$1.Result> {",
      "    this.calledTimes++",
      "    this.params = params",
      "    return this.result",
      "  }",
      "}",
      ""
    ]
  }
}

